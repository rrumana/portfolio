pub mod game_of_life;
pub mod middleware;
pub mod routes;

use axum::{
    Router,
    middleware::from_fn,
    routing::{get, get_service},
};

use std::path::PathBuf;
use tower_http::services::{ServeDir, ServeFile};

/// Builds the application router.
/// - `static_dir`: the directory for static assets generated by Astro.
/// - `wasm_dir`: the directory containing the WebAssembly bundle.
/// - `game_api`: the router for your Game of Life API endpoints.
pub fn app(static_dir: &str, wasm_dir: &str, game_api: Router) -> Router {
    let index_fallback = PathBuf::from(static_dir).join("index.html");

    let static_service =
        get_service(ServeDir::new(static_dir).not_found_service(ServeFile::new(index_fallback)));

    Router::new()
        .route("/sitemap.xml", get(routes::sitemap))
        .nest("/api/game-of-life", game_api)
        .nest_service("/wasm", get_service(ServeDir::new(wasm_dir)))
        .fallback_service(static_service)
        .layer(from_fn(middleware::log_requests))
}
